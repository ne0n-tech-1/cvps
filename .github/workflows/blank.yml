name: Pterodactyl Auto Setup & Backup
          
          
            

          
          
            on:
          
          
              workflow_dispatch:
          
          
              schedule:
          
          
                - cron: "0 */6 * * *" # every ~6 hours
          
          
            

          
          
            jobs:
          
          
              setup-and-backup:
          
          
                runs-on: ubuntu-22.04
          
          
            

          
          
                steps:
          
          
                  - name: Checkout repo
          
          
                    uses: actions/checkout@v3
          
          
            

          
          
                  - name: Restore backup if exists
          
          
                    id: restore_panel
          
          
                    run: |
          
          
                      mkdir -p backup
          
          
                      if [ -f backup/latest-backup-urls.txt ]; then
          
          
                        echo "Backup exists, restoring..."
          
          
                        while read -r url; do
          
          
                          fname=$(basename "$url")
          
          
                          curl -L "$url" -o "backup/$fname"
          
          
                        done < backup/latest-backup-urls.txt
          
          
                        cat backup/latest-backup.tar.gz.part-* > backup/latest-backup.tar.gz
          
          
                        sudo tar -xzf backup/latest-backup.tar.gz -C /
          
          
                        echo "restored=true" >> $GITHUB_OUTPUT
          
          
                      else
          
          
                        echo "No backup found, proceeding with fresh install."
          
          
                        echo "restored=false" >> $GITHUB_OUTPUT
          
          
                      fi
          
          
            

          
          
                  - name: Install dependencies
          
          
                    if: steps.restore_panel.outputs.restored == 'false'
          
          
                    run: |
          
          
                      sudo apt-get update
          
          
                      sudo apt-get install -y curl wget unzip tar gnupg lsb-release git mariadb-server \
          
          
                          redis-server nginx software-properties-common apt-transport-https ca-certificates
          
          
            

          
          
                  - name: Install PHP 8.2 + Extensions
          
          
                    if: steps.restore_panel.outputs.restored == 'false'
          
          
                    run: |
          
          
                      sudo add-apt-repository ppa:ondrej/php -y
          
          
                      sudo apt-get update
          
          
                      sudo apt-get install -y php8.2 php8.2-cli php8.2-common \
          
          
                        php8.2-mysql php8.2-pgsql php8.2-sqlite3 php8.2-redis \
          
          
                        php8.2-mbstring php8.2-xml php8.2-bcmath php8.2-gd \
          
          
                        php8.2-curl php8.2-zip php8.2-fpm composer unzip curl git
          
          
            

          
          
                      sudo update-alternatives --set php /usr/bin/php8.2
          
          
                      sudo systemctl enable --now php8.2-fpm
          
          
                      php -v
          
          
            

          
          
                  - name: Setup MySQL for Pterodactyl
          
          
                    if: steps.restore_panel.outputs.restored == 'false'
          
          
                    run: |
          
          
                      sudo systemctl start mysql
          
          
                      sudo mysql -u root -e "CREATE DATABASE IF NOT EXISTS panel;"
          
          
                      sudo mysql -u root -e "CREATE USER IF NOT EXISTS 'pterodactyl'@'localhost' IDENTIFIED BY 'StrongPassword123!';"
          
          
                      sudo mysql -u root -e "GRANT ALL PRIVILEGES ON panel.* TO 'pterodactyl'@'localhost';"
          
          
                      sudo mysql -u root -e "FLUSH PRIVILEGES;"
          
          
            

          
          
                  - name: Install Pterodactyl Panel
          
          
                    if: steps.restore_panel.outputs.restored == 'false'
          
          
                    run: |
          
          
                      sudo mkdir -p /var/www/pterodactyl
          
          
                      cd /var/www/pterodactyl
          
          
            

          
          
                      sudo curl -Lo panel.tar.gz https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz
          
          
                      sudo tar -xzvf panel.tar.gz
          
          
            

          
          
                      sudo chown -R $USER:$USER /var/www/pterodactyl
          
          
            

          
          
                      cp .env.example .env
          
          
                      sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=mysql/' .env
          
          
                      sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
          
          
                      sed -i 's/DB_PORT=3306/DB_PORT=3306/' .env
          
          
                      sed -i 's/DB_DATABASE=panel/DB_DATABASE=panel/' .env
          
          
                      sed -i 's/DB_USERNAME=root/DB_USERNAME=pterodactyl/' .env
          
          
                      sed -i 's/DB_PASSWORD=/DB_PASSWORD=StrongPassword123!/' .env
          
          
                      composer install --no-dev --optimize-autoloader
          
          
                      php artisan key:generate --force
          
          
                      php artisan migrate --seed --force
          
          
            

          
          
                      sudo chown -R www-data:www-data /var/www/pterodactyl
          
          
            

          
          
                  - name: Create Admin User
          
          
                    if: steps.restore_panel.outputs.restored == 'false'
          
          
                    run: |
          
          
                      cd /var/www/pterodactyl
          
          
                      php artisan p:user:make \
          
          
                        --username="${{ secrets.ADMIN_USERNAME }}" \
          
          
                        --email="${{ secrets.ADMIN_EMAIL }}" \
          
          
                        --name-first="${{ secrets.ADMIN_FIRST_NAME }}" \
          
          
                        --name-last="${{ secrets.ADMIN_LAST_NAME }}" \
          
          
                        --password="${{ secrets.ADMIN_PASSWORD }}" \
          
          
                        --admin=1 \
          
          
                        --no-interaction
          
          
            

          
          
                  - name: Disable Apache
          
          
                    if: steps.restore_panel.outputs.restored == 'false'
          
          
                    run: |
          
          
                      sudo systemctl stop apache2 || true
          
          
                      sudo systemctl disable apache2 || true
          
          
                      sudo systemctl mask apache2 || true
          
          
            

          
          
                  - name: Configure Nginx for Panel
          
          
                    if: steps.restore_panel.outputs.restored == 'false'
          
          
                    run: |
          
          
                      cat <<EOF | sudo tee /etc/nginx/sites-available/pterodactyl.conf
          
          
                      server {
          
          
                          listen 80;
          
          
                          server_name _;
          
          
                          root /var/www/pterodactyl/public;
          
          
                          index index.php;
          
          
                          location / {
          
          
                              try_files \$uri \$uri/ /index.php?\$query_string;
          
          
                          }
          
          
                          location ~ \.php\$ {
          
          
                              include snippets/fastcgi-php.conf;
          
          
                              fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
          
          
                              fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
          
          
                              include fastcgi_params;
          
          
                          }
          
          
                      }
          
          
                      EOF
          
          
                      sudo ln -sf /etc/nginx/sites-available/pterodactyl.conf /etc/nginx/sites-enabled/
          
          
                      sudo nginx -t
          
          
                      sudo systemctl restart nginx
          
          
            

          
          
                  - name: Fix Nginx sites
          
          
                    if: steps.restore_panel.outputs.restored == 'false'
          
          
                    run: |
          
          
                      sudo rm -f /etc/nginx/sites-enabled/default
          
          
                      sudo ln -sf /etc/nginx/sites-available/pterodactyl.conf /etc/nginx/sites-enabled/pterodactyl.conf
          
          
                      sudo nginx -t
          
          
                      sudo systemctl reload nginx
          
          
            

          
          
                  - name: Setup Cloudflare Tunnel
          
          
                    run: |
          
          
                      echo "☁️ Installing cloudflared..."
          
          
                      wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          
          
                      chmod +x /usr/local/bin/cloudflared
          
          
                      echo "🔧 Generating tunnel configuration..."
          
          
                      sudo mkdir -p /etc/cloudflared
          
          
                      TUNNEL_DOMAIN="panel.neonhost.tech"
          
          
                      sudo tee /etc/cloudflared/config.yml > /dev/null <<EOF
          
          
                      ingress:
          
          
                        - hostname: ${TUNNEL_DOMAIN}
          
          
                          service: http://127.0.0.1
          
          
                        - service: http_status:404
          
          
                      EOF
          
          
                      echo "☁️ Starting tunnel with token..."
          
          
                      nohup cloudflared tunnel --no-autoupdate run --token ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }} &
          
          
                  - name: SSHX Session (21100s)
          
          
                    run: |
          
          
                      curl -sSf https://sshx.io/get | sh
          
          
                      sshx &
          
          
                      SSHX_PID=$!
          
          
                      sleep 21100
          
          
                      kill $SSHX_PID || true
          
          
            

          
          
            

          
          
                  - name: Create Backup and Upload
          
          
                    run: |
          
          
                      echo "🧹 Cleaning old backups..."
          
          
                      rm -rf backup
          
          
                      mkdir -p backup
          
          
            

          
          
                      BACKUP_NAME="latest-backup.tar.gz"
          
          
                      echo "📦 Creating backup..."
          
          
                      # Backup panel and nginx configs
          
          
                      sudo tar -czf - /var/www/pterodactyl /etc/nginx /var/lib/mysql \
          
          
                         | split -b 4096M - backup/${BACKUP_NAME}.part-
          
          
            

          
          
                      echo "⬆️ Uploading to temp.sh..."
          
          
                      > backup/latest-backup-urls.txt
          
          
                      shopt -s nullglob
          
          
                      for f in backup/${BACKUP_NAME}.part-*; do
          
          
                        if [ -s "$f" ]; then
          
          
                          URL=$(curl -s -T "$f" https://temp.sh)
          
          
                          echo "$URL" | tee -a backup/latest-backup-urls.txt
          
          
                        else
          
          
                          echo "⚠️ Skipping empty part: $f"
          
          
                        fi
          
          
                      done
          
          
            

          
          
              free1:
          
          
                runs-on: ubuntu-22.04
          
          
            

          
          
                steps:
          
          
                  - name: Checkout repo
          
          
                    uses: actions/checkout@v3
          
          
            

          
          
                  - name: Restore backup if exists
          
          
                    id: restore_node
          
          
                    run: |
          
          
                      mkdir -p backup
          
          
                      if [ -f backup/latest-backup-urls.txt ]; then
          
          
                        echo "🔄 Restoring backup..."
          
          
                        while read -r url; do
          
          
                          fname=$(basename "$url")
          
          
                          curl -L "$url" -o "backup/$fname"
          
          
                        done < backup/latest-backup-urls.txt
          
          
                        cat backup/latest-backup.tar.gz.part-* > backup/latest-backup.tar.gz
          
          
                        sudo tar -xzf backup/latest-backup.tar.gz -C /
          
          
                        echo "restored=true" >> $GITHUB_OUTPUT
          
          
                      else
          
          
                        echo "⚠️ No backup found, starting fresh."
          
          
                        echo "restored=false" >> $GITHUB_OUTPUT
          
          
                      fi
          
          
            

          
          
                  - name: Install Pterodactyl Wings
          
          
                    if: steps.restore_node.outputs.restored == 'false'
          
          
                    run: |
          
          
                      sudo apt-get update
          
          
                      sudo apt-get install -y docker.io docker-compose
          
          
                      sudo systemctl enable --now docker
          
          
                      sudo mkdir -p /etc/pterodactyl /var/lib/pterodactyl
          
          
                      curl -L -o /usr/local/bin/wings "https://github.com/pterodactyl/wings/releases/latest/download/wings_linux_amd64"
          
          
                      sudo chmod +x /usr/local/bin/wings
          
          
            

          
          
                  - name: Setup Cloudflare Tunnel
          
          
                    run: |
          
          
                      echo "☁️ Installing cloudflared..."
          
          
                      wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          
          
                      chmod +x /usr/local/bin/cloudflared
          
          
                      echo "🔧 Generating tunnel configuration..."
          
          
                      sudo mkdir -p /etc/cloudflared
          
          
                      TUNNEL_DOMAIN="free1.neonhost.tech"
          
          
                      sudo tee /etc/cloudflared/config.yml > /dev/null <<EOF
          
          
                      ingress:
          
          
                        - hostname: ${TUNNEL_DOMAIN}
          
          
                          service: http://127.0.0.1
          
          
                        - service: http_status:404
          
          
                      EOF
          
          
                      echo "☁️ Starting tunnel with token..."
          
          
                      nohup cloudflared tunnel --no-autoupdate run --token ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN_FREE1 }} &
          
          
                  - name: SSHX Session (21100s)
          
          
                    run: |
          
          
                      curl -sSf https://sshx.io/get | sh
          
          
                      sshx &
          
          
                      SSHX_PID=$!
          
          
                      sleep 21100
          
          
                      kill $SSHX_PID || true
          
          
            

          
          
            

          
          
                  - name: Create Backup and Upload
          
          
                    run: |
          
          
                      echo "🧹 Cleaning old backups..."
          
          
                      rm -rf backup
          
          
                      mkdir -p backup
          
          
            

          
          
                      BACKUP_NAME="latest-backup.tar.gz"
          
          
                      echo "📦 Creating backup..."
          
          
                      # Backup node and nginx configs
          
          
                      sudo tar --ignore-failed-read \
          
          
                               --exclude='/usr/bin' \
          
          
                               --exclude='/usr/lib' \
          
          
                               --exclude='/var/lib/tailscale' \
          
          
                               -czf - /etc/pterodactyl /etc/nginx /var/lib/pterodactyl \
          
          
                               | split -b 4096M - backup/${BACKUP_NAME}.part-
          
          
            

          
          
                      echo "⬆️ Uploading to temp.sh..."
          
          
                      > backup/latest-backup-urls.txt
          
          
                      shopt -s nullglob
          
          
                      for f in backup/${BACKUP_NAME}.part-*; do
          
          
                        if [ -s "$f" ]; then
          
          
                          URL=$(curl -s -T "$f" https://temp.sh)
          
          
                          echo "$URL" | tee -a backup/latest-backup-urls.txt
          
          
                        else
          
          
                          echo "⚠️ Skipping empty part: $f"
          
          
                        fi
          
          
                      done
