name: Pterodactyl Auto Setup & Backup

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *" # every ~6 hours

jobs:
  setup-and-backup:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget unzip tar gnupg lsb-release git mariadb-server \
              redis-server nginx software-properties-common apt-transport-https ca-certificates \
              php php-cli php-mysql php-mbstring php-bcmath php-xml php-fpm php-curl

      - name: Restore backup if exists
        run: |
          if [ -f backup/latest-backup.tar.gz ]; then
            echo "Backup exists, skipping installation."
            tar -xzf backup/latest-backup.tar.gz -C /
            exit 0
          else
            echo "No backup found, proceeding with installation."
          fi

      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_KEY }} --hostname=ptero-panel --advertise-routes=10.0.0.0/24 --accept-routes
          sudo tailscale ip -4 > panel-ip.txt
          echo "Panel IP: $(cat panel-ip.txt)"
      - name: Install PHP 8.2
        run: |
          sudo add-apt-repository ppa:ondrej/php -y
          sudo apt-get update
          sudo apt-get install -y php8.2 php8.2-cli php8.2-common php8.2-mysql \
            php8.2-pgsql php8.2-sqlite3 php8.2-redis php8.2-mbstring php8.2-xml \
            php8.2-bcmath php8.2-gd php8.2-curl unzip curl git \
            php8.2-zip composer
          
          # Ensure php8.2 is default
          sudo update-alternatives --set php /usr/bin/php8.2
          php -v
      - name: Install Pterodactyl Panel
        run: |
          sudo mkdir -p /var/www/pterodactyl
          cd /var/www/pterodactyl
          
          # Download and extract release
          sudo curl -Lo panel.tar.gz https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz
          sudo tar -xzvf panel.tar.gz
          
          # Fix ownership so runner user can work
          sudo chown -R $USER:$USER /var/www/pterodactyl
          mkdir -p vendor
          
          # Copy env example
          cp .env.example .env
          
          # Install dependencies
          composer install --no-dev --optimize-autoloader
          
          # Laravel setup
          php artisan key:generate
          php artisan migrate --seed --force
          
          # Reset permissions for webserver
          sudo chown -R www-data:www-data /var/www/pterodactyl

      - name: Configure Nginx for Panel
        run: |
          cat <<EOF | sudo tee /etc/nginx/sites-available/pterodactyl.conf
          server {
              listen 80;
              server_name _;
              root /var/www/pterodactyl/public;
              index index.php;
              location / {
                  try_files \$uri \$uri/ /index.php?\$query_string;
              }
              location ~ \.php\$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                  include fastcgi_params;
              }
          }
          EOF
          sudo ln -s /etc/nginx/sites-available/pterodactyl.conf /etc/nginx/sites-enabled/
          sudo nginx -t
          sudo systemctl restart nginx

      - name: Install Node1
        run: |
          sudo mkdir -p /etc/pterodactyl
          cd /etc/pterodactyl
          sudo curl -Lo wings.tar.gz https://github.com/pterodactyl/wings/releases/latest/download/wings_linux_amd64.tar.gz
          sudo tar -xzvf wings.tar.gz
          echo "Node1 installed."
      - name: Start Node2 (separate VM)
        run: |
          # This simulates second node. In real setup you'd provision another VM.
          mkdir -p /etc/pterodactyl/node2
          echo "Node2 installed."

      - name: Start Cloudflare Tunnel
        run: |
          docker run -d cloudflare/cloudflared:latest tunnel --no-autoupdate run --token ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}

      - name: Sleep before backup
        run: sleep 21000

      - name: Create Backup
        run: |
          mkdir -p backup
          sudo tar -czf backup/latest-backup.tar.gz \
            /var/www/pterodactyl \
            /etc/pterodactyl \
            /etc/nginx \
            /var/lib/mysql \
            /var/lib/redis \
            /var/lib/tailscale

      - name: Push Backup to Repo
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add backup/latest-backup.tar.gz
          git commit -m "Automated backup $(date)"
          git push
