name: Pterodactyl Auto Setup & Backup

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *" # every ~6 hours

jobs:
  panel-and-node1:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Start SSH session (sshx)
        if: ${{ always() }}
        run: |
          curl -sSf https://sshx.io/get | sh

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget unzip tar gnupg lsb-release git mariadb-server \
              redis-server nginx software-properties-common apt-transport-https ca-certificates

      - name: Restore backup if exists
        run: |
          if [ -f backup/latest-backup-urls.txt ]; then
            echo "Backup exists, restoring..."
            mkdir -p backup
            while read -r url; do
              fname=$(basename "$url")
              curl -L "$url" -o "backup/$fname"
            done < backup/latest-backup-urls.txt
            cat backup/latest-backup.tar.gz.part-* > backup/latest-backup.tar.gz
            sudo tar -xzf backup/latest-backup.tar.gz -C /
            exit 0
          else
            echo "No backup found, proceeding with fresh install."
          fi

      - name: Install PHP 8.2 + Extensions
        run: |
          sudo add-apt-repository ppa:ondrej/php -y
          sudo apt-get update
          sudo apt-get install -y php8.2 php8.2-cli php8.2-common \
            php8.2-mysql php8.2-pgsql php8.2-sqlite3 php8.2-redis \
            php8.2-mbstring php8.2-xml php8.2-bcmath php8.2-gd \
            php8.2-curl php8.2-zip php8.2-fpm composer unzip curl git
          
          sudo update-alternatives --set php /usr/bin/php8.2
          sudo systemctl enable --now php8.2-fpm

      - name: Setup MySQL for Pterodactyl
        run: |
          sudo systemctl start mysql
          sudo mysql -u root -e "CREATE DATABASE IF NOT EXISTS panel;"
          sudo mysql -u root -e "CREATE USER IF NOT EXISTS 'pterodactyl'@'localhost' IDENTIFIED BY 'StrongPassword123!';"
          sudo mysql -u root -e "GRANT ALL PRIVILEGES ON panel.* TO 'pterodactyl'@'localhost';"
          sudo mysql -u root -e "FLUSH PRIVILEGES;"

      - name: Install Pterodactyl Panel
        run: |
          sudo mkdir -p /var/www/pterodactyl
          cd /var/www/pterodactyl
          sudo curl -Lo panel.tar.gz https://github.com/pterodactyl/panel/releases/latest/download/panel.tar.gz
          sudo tar -xzvf panel.tar.gz
          sudo chown -R $USER:$USER /var/www/pterodactyl
          cp .env.example .env
          sed -i 's/DB_DATABASE=.*/DB_DATABASE=panel/' .env
          sed -i 's/DB_USERNAME=.*/DB_USERNAME=pterodactyl/' .env
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=StrongPassword123!/' .env
          composer install --no-dev --optimize-autoloader
          php artisan key:generate --force
          php artisan migrate --seed --force
          sudo chown -R www-data:www-data /var/www/pterodactyl

      - name: Create Admin User
        run: |
          cd /var/www/pterodactyl
          php artisan p:user:make \
            --username="${{ secrets.ADMIN_USERNAME }}" \
            --email="${{ secrets.ADMIN_EMAIL }}" \
            --name-first="${{ secrets.ADMIN_FIRST_NAME }}" \
            --name-last="${{ secrets.ADMIN_LAST_NAME }}" \
            --password="${{ secrets.ADMIN_PASSWORD }}" \
            --admin=1 \
            --no-interaction

      - name: Disable Apache
        run: |
          sudo systemctl stop apache2 || true
          sudo systemctl disable apache2 || true
          sudo systemctl mask apache2 || true

      - name: Configure Nginx for Panel
        run: |
          cat <<EOF | sudo tee /etc/nginx/sites-available/pterodactyl.conf
          server {
              listen 80;
              server_name _;
              root /var/www/pterodactyl/public;
              index index.php;
              location / {
                  try_files \$uri \$uri/ /index.php?\$query_string;
              }
              location ~ \.php\$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                  include fastcgi_params;
              }
          }
          EOF
          sudo ln -sf /etc/nginx/sites-available/pterodactyl.conf /etc/nginx/sites-enabled/
          sudo nginx -t
          sudo systemctl restart nginx

      - name: Setup Cloudflare Tunnel (Panel)
        run: |
          echo "☁️ Installing cloudflared..."
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          chmod +x /usr/local/bin/cloudflared
          sudo mkdir -p /etc/cloudflared
          TUNNEL_DOMAIN="panel.neonhost.tech"
          sudo tee /etc/cloudflared/config.yml > /dev/null <<EOF
          ingress:
            - hostname: ${TUNNEL_DOMAIN}
              service: http://127.0.0.1
            - service: http_status:404
          EOF
          nohup cloudflared tunnel --no-autoupdate run --token ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }} &

      - name: Sleep before backup
        run: sleep 21200

      - name: Create Backup and Upload to temp.sh
        run: |
          echo "🧹 Cleaning old backups..."
          rm -rf backup
          mkdir -p backup
          BACKUP_NAME="latest-backup.tar.gz"
          echo "📦 Creating backup..."
          sudo tar --ignore-failed-read \
                   --exclude='/usr/bin' \
                   --exclude='/usr/lib' \
                   -czf - \
                   /var/www/pterodactyl \
                   /etc/nginx \
                   /var/lib/mysql \
                   /var/lib/redis \
                   /etc/cloudflared \
                   | split -b 4096M - backup/${BACKUP_NAME}.part-
          echo "⬆️ Uploading to temp.sh..."
          > backup/latest-backup-urls.txt
          shopt -s nullglob
          for f in backup/${BACKUP_NAME}.part-*; do
            if [ -s "$f" ]; then
              URL=$(curl -s -T "$f" https://temp.sh)
              echo "$URL" | tee -a backup/latest-backup-urls.txt
            fi
          done

  node2:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Start SSH session (sshx)
        if: ${{ always() }}
        run: |
          curl -sSf https://sshx.io/get | sh

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget unzip tar gnupg lsb-release git nginx \
              software-properties-common apt-transport-https ca-certificates

      - name: Setup Cloudflare Tunnel (Node2)
        run: |
          echo "☁️ Installing cloudflared..."
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O /usr/local/bin/cloudflared
          chmod +x /usr/local/bin/cloudflared
          sudo mkdir -p /etc/cloudflared
          TUNNEL_DOMAIN="node2.neonhost.tech"
          sudo tee /etc/cloudflared/config.yml > /dev/null <<EOF
          ingress:
            - hostname: ${TUNNEL_DOMAIN}
              service: http://127.0.0.1
            - service: http_status:404
          EOF
          nohup cloudflared tunnel --no-autoupdate run --token ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN_NODE2 }} &
